{
    
    "$id": "https://open-metadata.org/schema/entity/services/connections/database/flinkSqlGatewayConnection.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "FlinkSqlGatewayConnection",
    "description": "Flink Sql Gateway Metadata Connection Config",
    "type": "object",
    "javaType": "org.openmetadata.schema.services.connections.database.FlinkSqlGatewayConnection",
    "definitions": {
      "flinkSqlGatewayType": {
        "description": "Service type.",
        "type": "string",
        "enum": ["FlinkSqlGateway"],
        "default": "FlinkSqlGateway"
      },
      "flinkSqlGatewayScheme": {
      "description": "SQLAlchemy driver scheme options.",
      "type": "string",
      "enum": ["flinksqlgateway+http"],
      "default": "flinksqlgateway+http"
      }
    },
    "properties": {
      "type": {
        "title": "Service Type",
        "description": "Service Type",
        "$ref": "#/definitions/flinkSqlGatewayType",
        "default": "FlinkSqlGateway"
      },
      "hostPort": {
        "expose": true,
        "title": "Host And Port",
        "description": "Flink Sql Gateway Rest URI",
        "type": "string",
        "format": "uri",
        "default": "127.0.0.1:8083"
      },
       "catalog": {
        "title": "Catalog Name",
        "description": "Catalogs provide metadata, such as databases, tables, partitions, views, and functions and information needed to access data stored in a database or other external systems.",
        "default": "default_catalog"
      },
      "database": {
        "title": "Database Name",
        "description": "Catalogs provide metadata, such as databases, tables, partitions, views, and functions and information needed to access data stored in a database or other external systems.",
        "default": "ods"
      },
      "tableFilterPattern": {
        "title": "Default Table Filter Pattern",
        "description": "Regex to only include/exclude tables that matches the pattern.",
        "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern"
      },
      "databaseFilterPattern": {
        "title": "Default Database Filter Pattern",
        "description": "Regex to only include/exclude databases that matches the pattern.",
        "$ref": "../../../../type/filterPattern.json#/definitions/filterPattern"
      },
      "supportsMetadataExtraction": {
        "title": "Supports Metadata Extraction",
        "$ref": "../connectionBasicType.json#/definitions/supportsMetadataExtraction"
      },
      "supportsUsageExtraction": {
        "$ref": "../connectionBasicType.json#/definitions/supportsUsageExtraction"
      },
      "supportsLineageExtraction": {
        "$ref": "../connectionBasicType.json#/definitions/supportsLineageExtraction"
      },
      "supportsDBTExtraction": {
        "$ref": "../connectionBasicType.json#/definitions/supportsDBTExtraction"
      },
      "supportsProfiler": {
        "title": "Supports Profiler",
        "$ref": "../connectionBasicType.json#/definitions/supportsProfiler"
      },
      "supportsQueryComment": {
        "title": "Supports Query Comment",
        "$ref": "../connectionBasicType.json#/definitions/supportsQueryComment"
      },
      "sampleDataStorageConfig": {
        "title": "Storage Config for Sample Data",
        "$ref": "../connectionBasicType.json#/definitions/sampleDataStorageConfig"
      }
    },
    "additionalProperties": false,
    "required": ["hostPort", "catalog"]
}